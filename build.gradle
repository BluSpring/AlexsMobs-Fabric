plugins {
    id 'java'
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id 'maven-publish'
}


repositories{
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    mavenCentral()
    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }

    maven {
        name = "DevOS One"
        url = ("https://mvn.devos.one/snapshots/")
    }

    maven {
        name = "JitPack"
        url = ("https://jitpack.io/")
    }

    maven {
        name = "Cafeteria Dev"
        url = ("https://maven.cafeteria.dev/releases/")
        content {
            includeGroup("dev.cafeteria")
        }
    }

    maven {
        name = "JamiesWhiteShirt Dev"
        url = ("https://maven.jamieswhiteshirt.com/libs-release")
        content {
            includeGroup("com.jamieswhiteshirt")
        }
    }

    maven { url "https://maven.architectury.dev/" }

    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    maven {
        url "https://maven.minecraftforge.net"
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

version = '1.22.4'
group = 'com.github.alexthe667' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//archivesBaseName = 'alexsmobs'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

loom {
    accessWidenerPath = file("src/main/resources/alexsmobs.accesswidener")
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.19.2:2022.11.27@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.minecraftforge:forgeconfigapiport-fabric:4.2.11"

    implementation 'com.electronwill.night-config:core:3.6.5'
    implementation 'com.electronwill.night-config:toml:3.6.5'

    // @Nullable
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    include(modImplementation("io.github.fabricators_of_create.Porting-Lib:porting-lib:2.1.875+1.19.2"))
    include modImplementation("com.jamieswhiteshirt:reach-entity-attributes:2.3.0")
    include(modImplementation('com.github.KiltMC:ForgeCapabilities:54b0bd031c'))
    include(modImplementation('com.github.KiltMC:ForgeBiomeModifiers:834a616002'))
    include(modImplementation("com.github.KiltMC:EnumExtension:74f3690f92"))

    modRuntimeOnly("maven.modrinth:sodium:mc1.19.2-0.4.4")
    modRuntimeOnly("maven.modrinth:lazydfu:0.1.3")
    modRuntimeOnly("maven.modrinth:indium:1.0.9+mc1.19.2")

    runtimeOnly ("org.joml:joml:1.10.4")

    include(implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:0.2.0-beta.9")))

    modApi "dev.architectury:architectury-fabric:6.5.85"

    include(modApi("com.github.BluSpring:Citadel-Fabric:9ea656c024")) {
        exclude group: "com.github.KiltMC"
    }
    modImplementation("curse.maven:jei-238222:4494409")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "alexsmobs",
            "Specification-Vendor": "alexthe668",
            "Specification-Version": "1.17.0", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"alexthe668",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}